
# Run all services to get Red Panda
services:
  ksml_v1_1:
    #    image: axual/ksml:local
    #    pull_policy: missing
    image: axual/ksml:snapshot
    pull_policy: always
    hostname: ksml-test
    restart: no
    ports:
      - 8088:8088
      - 9988:9988
    # Using this non-standard directory to verify nothing is hardcoded to the image default /ksml
    volumes:
      - ./runner/:/otherKsml/runner
      - ./config/:/otherKsml/config
      - ./schemas/:/otherKsml/schemas
    working_dir: /ksml
    command:
      - /otherKsml/runner/ksml-runner-full.yaml
    depends_on:
      broker:
        condition: service_healthy
        restart: false
      schema_registry:
        condition: service_healthy
        restart: false
      prepare_cluster:
        condition: service_completed_successfully
        restart: false

  # Create test data
  prepare_cluster:
    image: apache/kafka:4.0.0
    hostname: kafka-setup
    depends_on:
      broker:
        condition: service_healthy
        restart: false
    restart: on-failure
    command: "bash -c 'echo Trying to create topics... && \
                         /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker:9093 --partitions 1 --replication-factor 1 --topic axual-testing-avro-test-input-avro-complex && \
                         /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker:9093 --partitions 1 --replication-factor 1 --topic axual-testing-avro-test-output-avro-complex && \
                         echo Done'"


  broker:
    image: apache/kafka:4.0.0
    hostname: broker
    restart: always
    environment:
      KAFKA_PROCESS_ROLES: 'controller,broker'
      KAFKA_BROKER_ID: 0
      KAFKA_NODE_ID: 0
      KAFKA_CONTROLLER_QUORUM_VOTERS: '0@broker:9090'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'

      KAFKA_ADVERTISED_LISTENERS: 'INNER://broker:9093'
      KAFKA_LISTENERS: 'INNER://broker:9093,CONTROLLER://broker:9090'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INNER:PLAINTEXT,CONTROLLER:PLAINTEXT'
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_LOG_RETENTION_MINUTES: 10
      KAFKA_INTER_BROKER_LISTENER_NAME: INNER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_NUM_PARTITIONS: 1
    healthcheck:
      # If the kafka topics can be created, the broker is healthy
      test: "/opt/kafka/bin/kafka-topics.sh --bootstrap-server $${HOSTNAME}:9093 --list"
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 5s

  schema_registry:
    image: apicurio/apicurio-registry:3.0.2
    hostname: registry
    depends_on:
      broker:
        condition: service_healthy
    restart: always
    environment:
      QUARKUS_HTTP_PORT: 8081
      QUARKUS_HTTP_CORS_ORIGINS: '*'
      QUARKUS_PROFILE: "prod"
      APICURIO_STORAGE_KIND: kafkasql
      APICURIO_KAFKASQL_BOOTSTRAP_SERVERS: 'broker:9093'
      APICURIO_KAFKASQL_TOPIC: '_apicurio-kafkasql-store'
      APICURIO_KAFKASQL_SNAPSHOTS_TOPIC: '_apicurio-kafkasql-snapshots'
      APICURIO_EVENTS_KAFKA_TOPIC: '_apicurio-kafkasql-events'
    healthcheck:
      # If the api endpoint is available, the service is considered healthy
      test: curl http://localhost:8081/apis
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 10s

  # Can be reached on http://127.0.0.1:8083/
  redpanda:
    hostname: redpanda
    image: redpandadata/console:v3.1.2
    restart: unless-stopped
    ports:
      - 8083:8083
    depends_on:
      broker:
        required: true
        restart: false
        condition: service_healthy
      schema_registry:
        required: true
        restart: false
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '512MB'
    entrypoint: ['/bin/sh', '-c', 'rm -rf "$${CONFIG_LOCATION}" && echo "$${PANDA_CONFIG}" > "$${CONFIG_LOCATION}" && cat "$${CONFIG_LOCATION}" && /app/console --config.filepath="$${CONFIG_LOCATION}"' ]
    environment:
      CONFIG_LOCATION: /tmp/config.yaml
      PANDA_CONFIG: |
        server:
          listenAddress: 0.0.0.0
          listenPort: 8083
          allowedOrigins: [ "*" ]
        
        kafka:
          brokers:
            - broker:9093
          tls:
            enabled: false

        schemaRegistry:
          enabled: true
          urls:
            - "http://registry:8081/apis/ccompat/v7"
